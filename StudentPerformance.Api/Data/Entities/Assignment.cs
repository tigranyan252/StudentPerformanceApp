// Path: StudentPerformance.Api/Data/Entities/Assignment.cs

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;

namespace StudentPerformance.Api.Data.Entities
{
    // Maps to the Assignments table
    [Table("Assignments")]
    public class Assignment
    {
        // Primary key, generated by the DB
        [Key]
        [DatabaseGenerated(DatabaseGeneratedOption.Identity)]
        public int AssignmentId { get; set; }

        // --- Foreign Key to TeacherSubjectGroupAssignment ---
        // This links the assignment to a specific course offering (who teaches what to whom in which semester)
        [Required]
        public int TeacherSubjectGroupAssignmentId { get; set; }

        // Navigation property to TeacherSubjectGroupAssignment
        [ForeignKey("TeacherSubjectGroupAssignmentId")]
        public TeacherSubjectGroupAssignment TeacherSubjectGroupAssignment { get; set; } = null!; // An assignment must be linked to a course offering

        // Required field for assignment title
        [Required]
        [MaxLength(200)] // Corresponds to nvarchar(200)
        public string Title { get; set; } = string.Empty; // Assignment title (e.g., "Control Work #1", "Homework 3")

        // Optional assignment description
        [MaxLength(1000)] // Sufficient for a more detailed description
        public string? Description { get; set; } // Assignment description

        // Type of assignment (e.g., "Homework", "Control Work", "Exam", "Project")
        // Can be a string or a foreign key to an AssignmentType table
        [MaxLength(100)]
        public string? Type { get; set; } // Assignment type

        // Maximum score for the assignment.
        // Important for analysis and percentage calculation.
        [Required] // Recommended to be required for analysis
        [Column(TypeName = "decimal(5, 2)")] // E.g., up to 999.99
        public decimal MaxScore { get; set; } // Maximum score for the assignment (e.g., 100, 5, 10)

        // Due date for the assignment
        public DateTime DueDate { get; set; } // Date by which the assignment should be submitted (changed to non-nullable based on DTO)

        // Date of submission (if the assignment has been submitted)
        public DateTime? SubmissionDate { get; set; } // Actual submission date (can be null if not submitted)

        // Audit fields
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow; // Date of record creation
        public DateTime? UpdatedAt { get; set; } // Date of last record update

        // --- Navigation property for "one-to-many" relationship with Grade ---
        // Allows fetching all grades given for this assignment
        public ICollection<Grade> Grades { get; set; } = new List<Grade>();
    }
}